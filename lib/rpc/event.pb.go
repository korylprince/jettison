// Code generated by protoc-gen-go.
// source: event.proto
// DO NOT EDIT!

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	event.proto
	files.proto

It has these top-level messages:
	Report
	Notification
	FileSetRequest
	FileSetResponse
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Report struct {
	Serial     string            `protobuf:"bytes,1,opt,name=serial" json:"serial,omitempty"`
	MacAddress []byte            `protobuf:"bytes,2,opt,name=mac_address,proto3" json:"mac_address,omitempty"`
	Location   string            `protobuf:"bytes,3,opt,name=location" json:"location,omitempty"`
	Version    map[string]uint64 `protobuf:"bytes,4,rep,name=version" json:"version,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Report) GetVersion() map[string]uint64 {
	if m != nil {
		return m.Version
	}
	return nil
}

type Notification struct {
	Group   string `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Version uint64 `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
}

func (m *Notification) Reset()                    { *m = Notification{} }
func (m *Notification) String() string            { return proto.CompactTextString(m) }
func (*Notification) ProtoMessage()               {}
func (*Notification) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*Report)(nil), "rpc.Report")
	proto.RegisterType((*Notification)(nil), "rpc.Notification")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Events service

type EventsClient interface {
	Stream(ctx context.Context, opts ...grpc.CallOption) (Events_StreamClient, error)
}

type eventsClient struct {
	cc *grpc.ClientConn
}

func NewEventsClient(cc *grpc.ClientConn) EventsClient {
	return &eventsClient{cc}
}

func (c *eventsClient) Stream(ctx context.Context, opts ...grpc.CallOption) (Events_StreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Events_serviceDesc.Streams[0], c.cc, "/rpc.Events/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventsStreamClient{stream}
	return x, nil
}

type Events_StreamClient interface {
	Send(*Report) error
	Recv() (*Notification, error)
	grpc.ClientStream
}

type eventsStreamClient struct {
	grpc.ClientStream
}

func (x *eventsStreamClient) Send(m *Report) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventsStreamClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Events service

type EventsServer interface {
	Stream(Events_StreamServer) error
}

func RegisterEventsServer(s *grpc.Server, srv EventsServer) {
	s.RegisterService(&_Events_serviceDesc, srv)
}

func _Events_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventsServer).Stream(&eventsStreamServer{stream})
}

type Events_StreamServer interface {
	Send(*Notification) error
	Recv() (*Report, error)
	grpc.ServerStream
}

type eventsStreamServer struct {
	grpc.ServerStream
}

func (x *eventsStreamServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventsStreamServer) Recv() (*Report, error) {
	m := new(Report)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Events_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Events",
	HandlerType: (*EventsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Events_Stream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x4c, 0x90, 0x4f, 0x4b, 0x03, 0x31,
	0x14, 0xc4, 0x49, 0x53, 0xa3, 0xbe, 0xd4, 0x7f, 0xf1, 0x12, 0x7a, 0x2a, 0x3d, 0xad, 0x20, 0x41,
	0x2a, 0x88, 0x78, 0xef, 0xd5, 0x83, 0x82, 0x57, 0x89, 0xdb, 0xa7, 0x04, 0xb7, 0x9b, 0xf0, 0x92,
	0x2e, 0xec, 0x57, 0xf1, 0xd3, 0xba, 0x9b, 0x5d, 0xe8, 0x1e, 0x67, 0x32, 0x33, 0xbf, 0x24, 0x20,
	0xb1, 0xc1, 0x3a, 0x99, 0x40, 0x3e, 0x79, 0xc5, 0x29, 0x94, 0xeb, 0x3f, 0x06, 0xe2, 0x0d, 0x83,
	0xa7, 0xa4, 0x2e, 0x41, 0x44, 0x24, 0x67, 0x2b, 0xcd, 0x56, 0xac, 0x38, 0x57, 0xb7, 0x20, 0xf7,
	0xb6, 0xfc, 0xb4, 0xbb, 0x1d, 0x61, 0x8c, 0x7a, 0xd6, 0x99, 0x0b, 0x75, 0x0d, 0x67, 0x95, 0x2f,
	0x6d, 0x72, 0xbe, 0xd6, 0x3c, 0xc7, 0xee, 0xe0, 0xb4, 0x41, 0x8a, 0xbd, 0x31, 0x5f, 0xf1, 0x42,
	0x6e, 0xb4, 0xe9, 0x86, 0xcd, 0x30, 0x6a, 0x3e, 0x86, 0xa3, 0x6d, 0x9d, 0xa8, 0x5d, 0x1a, 0x58,
	0x4c, 0xb5, 0x92, 0xc0, 0x7f, 0xb1, 0x1d, 0x71, 0x17, 0x70, 0xd2, 0xd8, 0xea, 0x80, 0x19, 0x34,
	0x7f, 0x99, 0x3d, 0xb3, 0x75, 0x97, 0x7f, 0xf5, 0xc9, 0x7d, 0xbb, 0x01, 0xd8, 0x47, 0x7e, 0xc8,
	0x1f, 0xc2, 0xd8, 0xb8, 0x3a, 0x92, 0x73, 0x67, 0xf3, 0x04, 0x62, 0xdb, 0x3f, 0x30, 0xaa, 0x7b,
	0x10, 0xef, 0x89, 0xd0, 0xee, 0x95, 0x9c, 0xdc, 0x66, 0x79, 0x93, 0xc5, 0x74, 0xb3, 0x60, 0x0f,
	0xec, 0x4b, 0xe4, 0x0f, 0x79, 0xfc, 0x0f, 0x00, 0x00, 0xff, 0xff, 0xd7, 0x82, 0x1b, 0x51, 0x1f,
	0x01, 0x00, 0x00,
}
