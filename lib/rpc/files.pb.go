// Code generated by protoc-gen-go.
// source: files.proto
// DO NOT EDIT!

package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type FileSetRequest struct {
	Groups []string `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *FileSetRequest) Reset()                    { *m = FileSetRequest{} }
func (m *FileSetRequest) String() string            { return proto.CompactTextString(m) }
func (*FileSetRequest) ProtoMessage()               {}
func (*FileSetRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type FileSetResponse struct {
	Sets map[string]*FileSetResponse_VersionedSet `protobuf:"bytes,1,rep,name=sets" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FileSetResponse) Reset()                    { *m = FileSetResponse{} }
func (m *FileSetResponse) String() string            { return proto.CompactTextString(m) }
func (*FileSetResponse) ProtoMessage()               {}
func (*FileSetResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *FileSetResponse) GetSets() map[string]*FileSetResponse_VersionedSet {
	if m != nil {
		return m.Sets
	}
	return nil
}

type FileSetResponse_VersionedSet struct {
	Version uint64            `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Set     map[uint64]string `protobuf:"bytes,2,rep,name=set" json:"set,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FileSetResponse_VersionedSet) Reset()                    { *m = FileSetResponse_VersionedSet{} }
func (m *FileSetResponse_VersionedSet) String() string            { return proto.CompactTextString(m) }
func (*FileSetResponse_VersionedSet) ProtoMessage()               {}
func (*FileSetResponse_VersionedSet) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

func (m *FileSetResponse_VersionedSet) GetSet() map[uint64]string {
	if m != nil {
		return m.Set
	}
	return nil
}

func init() {
	proto.RegisterType((*FileSetRequest)(nil), "rpc.FileSetRequest")
	proto.RegisterType((*FileSetResponse)(nil), "rpc.FileSetResponse")
	proto.RegisterType((*FileSetResponse_VersionedSet)(nil), "rpc.FileSetResponse.VersionedSet")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for FileSet service

type FileSetClient interface {
	Get(ctx context.Context, in *FileSetRequest, opts ...grpc.CallOption) (*FileSetResponse, error)
}

type fileSetClient struct {
	cc *grpc.ClientConn
}

func NewFileSetClient(cc *grpc.ClientConn) FileSetClient {
	return &fileSetClient{cc}
}

func (c *fileSetClient) Get(ctx context.Context, in *FileSetRequest, opts ...grpc.CallOption) (*FileSetResponse, error) {
	out := new(FileSetResponse)
	err := grpc.Invoke(ctx, "/rpc.FileSet/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FileSet service

type FileSetServer interface {
	Get(context.Context, *FileSetRequest) (*FileSetResponse, error)
}

func RegisterFileSetServer(s *grpc.Server, srv FileSetServer) {
	s.RegisterService(&_FileSet_serviceDesc, srv)
}

func _FileSet_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(FileSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(FileSetServer).Get(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _FileSet_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.FileSet",
	HandlerType: (*FileSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _FileSet_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor1 = []byte{
	// 242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0xcb, 0xcc, 0x49,
	0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0x2a, 0x48, 0x56, 0x52, 0xe0, 0xe2,
	0x73, 0x03, 0x8a, 0x05, 0xa7, 0x96, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71,
	0xb1, 0xa5, 0x17, 0xe5, 0x97, 0x16, 0x14, 0x4b, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x2a, 0x4d, 0x63,
	0xe2, 0xe2, 0x87, 0x2b, 0x29, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0xd2, 0xe1, 0x62, 0x29, 0x4e,
	0x2d, 0x81, 0xa8, 0xe0, 0x36, 0x92, 0xd3, 0x03, 0x9a, 0xa4, 0x87, 0xa6, 0x46, 0x0f, 0xc8, 0x2e,
	0x76, 0xcd, 0x2b, 0x29, 0xaa, 0x94, 0x6a, 0x61, 0xe4, 0xe2, 0x09, 0x4b, 0x2d, 0x2a, 0xce, 0xcc,
	0xcf, 0x4b, 0x4d, 0x01, 0x0a, 0x0b, 0xf1, 0x73, 0xb1, 0x97, 0x41, 0xf8, 0x40, 0x13, 0x18, 0x35,
	0x58, 0x84, 0xcc, 0xb9, 0x98, 0x81, 0xe6, 0x49, 0x30, 0x81, 0x8d, 0xd3, 0xc2, 0x6a, 0x1c, 0xb2,
	0x01, 0x20, 0xb3, 0x21, 0x46, 0x6b, 0x71, 0x71, 0xc0, 0xd8, 0x42, 0xdc, 0x5c, 0xcc, 0xd9, 0xa9,
	0x95, 0x50, 0x13, 0x79, 0xb9, 0x58, 0xcb, 0x12, 0x73, 0x4a, 0x53, 0x81, 0x66, 0x32, 0x6a, 0x70,
	0x5a, 0x31, 0x59, 0x30, 0x4a, 0xf9, 0x71, 0x71, 0xc2, 0xdd, 0x84, 0xac, 0x98, 0x53, 0xc8, 0x00,
	0x59, 0x31, 0xb7, 0x91, 0x22, 0x41, 0x07, 0x80, 0xcc, 0x33, 0xb2, 0xe6, 0x62, 0x87, 0xaa, 0x01,
	0x1a, 0xc0, 0xec, 0x0e, 0xa4, 0x84, 0x51, 0x35, 0x82, 0xc3, 0x53, 0x4a, 0x04, 0x9b, 0x69, 0x49,
	0x6c, 0xe0, 0x38, 0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x07, 0x9a, 0xe6, 0x45, 0x92, 0x01,
	0x00, 0x00,
}
